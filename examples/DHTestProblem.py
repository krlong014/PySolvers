from PySolvers.Linear.IterativeLinearSolver import mvmult
from scipy.io import mmread
from numpy.linalg import norm
import numpy.random

def DHTestProblem(lev):
    '''
    Read one of the test matrices A generated by finite element discretization
    of the Debye-Huckel equation on the unit square with homogeneous Neumann
    boundary conditions. Then produce a random vector x, and produce the RHS
    b = A*x for which x is the exact solution to the problem A*x=b.

    Input:
    -- lev: integer from 0 to 16 inclusive, with 0 discretized on the coarsest
            mesh and 16 the finest.

    Returns: tuple (A, b, x) where A*x=b.
    '''

    # We have matrices indexed between 0 and 16.
    assert(lev>=0 and lev<=16)

    # Read a matrix
    A = mmread('../TestMatrices/DH-Matrix-%d.mtx' % lev)
    A = A.tocsr()
    n,nc = A.shape
    print('Matrix is {} by {}'.format(n,nc))


    # Create a solution vector
    rng = numpy.random.default_rng()
    x = rng.random(n)
    # Multiply the solution by A to produce a RHS vector
    b = mvmult(A, x)

    return (A, b, x)
